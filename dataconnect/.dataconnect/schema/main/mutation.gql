extend type Mutation {
  """
  ✨ Insert a single `Car` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  car_insert(
    """
    Data object to insert into the table.
    """
    data: Car_Data!
  ): Car_KeyOutput! @fdc_generated(from: "Car", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Car` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  car_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Car_Data!]!
  ): [Car_KeyOutput!]! @fdc_generated(from: "Car", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Car` into the table, based on the primary key. Returns the key of the newly inserted `Car`.
  """
  car_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Car_Data!
  ): Car_KeyOutput! @fdc_generated(from: "Car", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Car` objects into the table, based on the primary key. Returns the key of the newly inserted `Car`.
  """
  car_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Car_Data!]!
  ): [Car_KeyOutput!]! @fdc_generated(from: "Car", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Car` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  car_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Car_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Car_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Car_Data!
  ): Car_KeyOutput @fdc_generated(from: "Car", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Car` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  car_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Car_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Car_Data!
  ): Int! @fdc_generated(from: "Car", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Car` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  car_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Car_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Car_FirstRow
  ): Car_KeyOutput @fdc_generated(from: "Car", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Car` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  car_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Car_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Car", purpose: DELETE_MULTIPLE)
}
